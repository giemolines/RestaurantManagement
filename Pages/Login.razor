@page "/login"
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Login</h3>

                    <div class="form-group">
                        <label for="username">Username</label>
                        <input @bind="Username" id="username" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="password">Password</label>
                        <input @bind="Password" id="password" type="password" class="form-control" />
                    </div>

                    <div class="text-center mt-3">
                        <button @onclick="HandleLogin" class="btn btn-primary px-4 py-2">Login</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string Username { get; set; }
    private string Password { get; set; }

    private async Task HandleLogin()
    {
        try
        {
            var fileContent = await ReadFileAsync("restoDB.csv");
            var fileLines = fileContent.Split('\n');

            foreach (var line in fileLines)
            {
                string[] fields = line.Split(',');

                // Check if the CSV row has enough columns and matches the entered username and password
                if (fields.Length >= 4 && fields[2] == Username && fields[3] == Password)
                {
                    NavigationManager.NavigateTo("/dashboard");
                    return;
                }
            }

            // If username and password do not match any records in the CSV
            Console.WriteLine("Your username/password is incorrect. Try again.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            // Log the exception details or handle the error as needed
        }
    }

    private async Task<string> ReadFileAsync(string filePath)
    {
        using (var reader = new StreamReader(filePath))
        {
            return await reader.ReadToEndAsync();
        }
    }
}
